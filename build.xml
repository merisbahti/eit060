<project name="Le Hospital System" default="pack" basedir=".">
    <description>
			This is le buildfile pour le hospital system.
    </description>
	 <!-- set global properties for this build -->
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="bin" location="bin"/>
  <property name="stores"  location="stores"/>
  <property name="lib"  location="lib"/>

  <property name="tst-dir" location="test" />
  <property name="TALK" value="true" />


  <path id="classpath.test">
    <pathelement location="${lib}/junit.jar" />
    <pathelement location="lib/sqlite.jar"/>
  </path>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  </target>

  <!-- Kompilera filerna och lägg ner dem i ./build
       För att förbereda dem för förpackning. -->
  <target name="compile" depends="init"
        description="compile the source " >
    <javac srcdir="${src}" destdir="${build}"  includeantruntime="false">
      <classpath refid="classpath.test"/>
    </javac>
  </target>

  <!-- Packa ner den kompilerade koden i .jar filer.
       en för server (som exkluderar alla client-classfiler)
       samt en för klient (som exkluderar alla server-classfiler)
       Detta möjliggör för oss att ha en gemensam modell i t.ex
       en model mapp.-->
  <target name="pack" depends="compile" description="generate the distribution" >
    <mkdir dir="${bin}"/>

    <jar destfile="${bin}/server.jar"> 
      <fileset dir="${build}">
        <exclude name="**/client/**"/>
      </fileset>
      <zipfileset includes="**/*.class" src="lib/sqlite.jar"/>
      <manifest>
        <attribute name="Main-Class" value="server/Server"/>
      </manifest>
    </jar>

    <jar destfile="${bin}/client.jar"> 
      <fileset dir="${build}">
        <exclude name="**/server/**"/>
      </fileset>
      <manifest>
        <attribute name="Main-Class" value="client/Client"/>
      </manifest>
    </jar>

  </target>

  <target name="test" depends="compile">
      <junit printsummary="yes" showoutput="true">
          <classpath>
              <path refid="classpath.test"/>
              <pathelement location="${build}/tests"/>
              <pathelement location="${build}"/>
          </classpath>
          <batchtest fork="yes">
              <fileset dir="${src}" includes="tests/*Test.java"/>
          </batchtest>
          <formatter type="brief" usefile="false"/>
      </junit>
  </target>

  <target name="server" depends="test">
    <java jar="${bin}/server.jar" fork="true">
      <arg line="9876"/>
    </java>
  </target> 

  <target name="client" depends="test">
    <java jar="${bin}/client.jar" fork="true">
      <arg line="localhost"/>
      <arg line="9876"/>
    </java>
  </target> 
  

  <target name="clean" description="clean up" >
    <delete dir="${build}"/>
    <delete dir="${bin}"/>
  </target>
</project>
